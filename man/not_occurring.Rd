% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/not.R
\name{not_occurring}
\alias{not_occurring}
\title{Invert a schedule}
\usage{
not_occurring(x, y = NULL)
}
\arguments{
\item{x, y}{Schedule objects.}
}
\value{
A schedule of events occurring only when the specified events do
not occur.
}
\description{
Create a schedule of events occurring only when the specified events do
not occur.
}
\details{
\code{not_occuring()} can accept either one or two schedules as input(s):
\itemize{
\item When a single schedule is used, the function returns a schedule of all
events that do not fall on on the input schedule. The result is the
\strong{negation} of the schedule. For example, the negation of all weekdays
would be a schedule of all weekend days.
\item When two schedules are used, the function returns the first schedule but
with the events of the second schedule stripped away. This works to remove
the events of the second schedule from the first.
\itemize{
\item This means that \code{not_occurring(a, b)} is the equivalent of
\code{only_occurring(a, not_occurring(b))}
\item This usage works best when composing with the pipe (\code{\%>\%}) operator.
}
}
}
\examples{
my_dates <- seq.Date(as.Date("1999-01-01"),
                     as.Date("1999-01-10"),
                     by = "1 day")

is_occurring(my_dates, in_month("Jan"))
is_occurring(my_dates, not_occurring(in_month("Jan")))
is_occurring(my_dates, on_wday("Sat"))
is_occurring(my_dates, not_occurring(on_wday("Sat")))

on_christmas <- only_occurring(on_mday(25), in_month("Dec"))
on_new_years_day <- on_yday(1)
on_public_holidays <- also_occurring(on_new_years_day, on_christmas)

on_business_days <-
  not_occurring(on_weekend()) \%>\%
  not_occurring(on_public_holidays)

is_occurring(my_dates, on_business_days)
}
