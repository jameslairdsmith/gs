% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sets.R
\name{also_occur}
\alias{also_occur}
\alias{only_occur}
\title{Weave schedules together}
\usage{
also_occur(x, y)

only_occur(x, y)
}
\arguments{
\item{x, y}{Schedule objects.}
}
\value{
A schedule object.
}
\description{
Functions to combine schedules using set operations.
}
\details{
\itemize{
\item \code{also_occur()} returns a schedule of events which includes all those
present in the first schedule (\code{x}) and all those present in the second
schedule (\code{y}). The resulting output is the \strong{union} of the two schedules.
\item \code{only_occur()} returns a schedule of events which includes only those
present in both the first schedule (\code{x}) and in the second schedule
(\code{y}). The resulting output is the \strong{intersection} of the two schedules.
}

Each function call is limited to two schedules. But more complex schedules
can be made by building schedules on top of one another. This process is
greatly eased by using the pipe operator (\code{\%>\%}) from the \code{magrittr}
package (see \emph{Examples}).

Behind the scenes, both function outputs inherit the schedule limits from
their inputs. For more
details see the \href{https://jameslairdsmith.github.io/scheduler/articles/understanding-schedule-limits.html}{vignette}
on understanding schedule limits.
}
\examples{
on_christmas <- only_occur(on_mday(25), in_month("Dec"))

schedule_days(on_christmas, from = 2000, to = 2004)

on_new_years_day <- on_yday(1)

on_boxing_day <-
   on_mday(26) \%>\%
   only_occur(in_month("Dec"))

on_public_holiday <-
   on_new_years_day \%>\%
   also_occur(on_christmas) \%>\%
   also_occur(on_boxing_day)

schedule_days(on_public_holiday, from = 2000, to = 2004)
}
